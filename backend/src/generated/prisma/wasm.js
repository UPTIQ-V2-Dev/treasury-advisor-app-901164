
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  businessType: 'businessType',
  industry: 'industry',
  businessSegment: 'businessSegment',
  riskProfile: 'riskProfile',
  relationshipManagerId: 'relationshipManagerId',
  contact: 'contact',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientAccountScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  accountType: 'accountType',
  bankName: 'bankName',
  routingNumber: 'routingNumber',
  isActive: 'isActive',
  openDate: 'openDate',
  balance: 'balance',
  currency: 'currency',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatementScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  filePath: 'filePath',
  uploadDate: 'uploadDate',
  status: 'status',
  clientId: 'clientId',
  accountId: 'accountId',
  period: 'period',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankConnectionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  accountId: 'accountId',
  bankName: 'bankName',
  connectionType: 'connectionType',
  lastSync: 'lastSync',
  status: 'status',
  credentials: 'credentials',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  clientId: 'clientId',
  statementId: 'statementId',
  date: 'date',
  description: 'description',
  amount: 'amount',
  type: 'type',
  category: 'category',
  counterparty: 'counterparty',
  balanceAfter: 'balanceAfter',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessingTaskScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  clientId: 'clientId',
  statementId: 'statementId',
  type: 'type',
  status: 'status',
  progress: 'progress',
  startTime: 'startTime',
  endTime: 'endTime',
  estimatedDuration: 'estimatedDuration',
  currentStep: 'currentStep',
  steps: 'steps',
  error: 'error',
  results: 'results',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TreasuryProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  features: 'features',
  eligibilityCriteria: 'eligibilityCriteria',
  pricing: 'pricing',
  benefits: 'benefits',
  riskLevel: 'riskLevel',
  liquidityFeatures: 'liquidityFeatures',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  productId: 'productId',
  priority: 'priority',
  rationale: 'rationale',
  estimatedBenefit: 'estimatedBenefit',
  implementation: 'implementation',
  supportingData: 'supportingData',
  confidence: 'confidence',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  implementedAt: 'implementedAt',
  notes: 'notes',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.TokenType = exports.$Enums.TokenType = {
  ACCESS: 'ACCESS',
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

exports.StatementStatus = exports.$Enums.StatementStatus = {
  UPLOADED: 'UPLOADED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  VALIDATED: 'VALIDATED'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  ERROR: 'ERROR',
  SYNCING: 'SYNCING'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  API: 'API',
  PLAID: 'PLAID',
  YODLEE: 'YODLEE',
  MANUAL: 'MANUAL'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT',
  ACH: 'ACH',
  WIRE: 'WIRE',
  CHECK: 'CHECK',
  TRANSFER: 'TRANSFER',
  FEE: 'FEE',
  INTEREST: 'INTEREST',
  OTHER: 'OTHER'
};

exports.TaskType = exports.$Enums.TaskType = {
  STATEMENT_PARSE: 'STATEMENT_PARSE',
  DATA_SYNC: 'DATA_SYNC',
  ANALYSIS: 'ANALYSIS',
  RECOMMENDATION_GENERATION: 'RECOMMENDATION_GENERATION'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.RecommendationPriority = exports.$Enums.RecommendationPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.RecommendationStatus = exports.$Enums.RecommendationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IMPLEMENTED: 'IMPLEMENTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  Client: 'Client',
  ClientAccount: 'ClientAccount',
  Statement: 'Statement',
  BankConnection: 'BankConnection',
  Transaction: 'Transaction',
  ProcessingTask: 'ProcessingTask',
  TreasuryProduct: 'TreasuryProduct',
  Recommendation: 'Recommendation'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/workspace/projects/d6e8f2b5-0865-485a-a63e-d083fad36462/c0eeb82a-e407-40dc-a73e-46d7bf3b4590/backend/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "linux-musl-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/workspace/projects/d6e8f2b5-0865-485a-a63e-d083fad36462/c0eeb82a-e407-40dc-a73e-46d7bf3b4590/backend/src/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id              Int      @id @default(autoincrement())\n  email           String   @unique\n  name            String?\n  password        String\n  role            Role     @default(USER)\n  isEmailVerified Boolean  @default(false)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  Token           Token[]\n  Client          Client[]\n}\n\nmodel Token {\n  id          Int       @id @default(autoincrement())\n  token       String\n  type        TokenType\n  expires     DateTime\n  blacklisted Boolean\n  createdAt   DateTime  @default(now())\n  user        User      @relation(fields: [userId], references: [id])\n  userId      Int\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n\nenum TokenType {\n  ACCESS\n  REFRESH\n  RESET_PASSWORD\n  VERIFY_EMAIL\n}\n\nmodel Client {\n  id                    String           @id @default(uuid())\n  name                  String\n  businessType          String\n  industry              String\n  businessSegment       String\n  riskProfile           String           @default(\"medium\")\n  relationshipManagerId Int\n  relationshipManager   User             @relation(fields: [relationshipManagerId], references: [id])\n  contact               Json\n  preferences           Json             @default(\"{}\")\n  createdAt             DateTime         @default(now())\n  updatedAt             DateTime         @updatedAt\n  ClientAccount         ClientAccount[]\n  Statement             Statement[]\n  BankConnection        BankConnection[]\n  ProcessingTask        ProcessingTask[]\n  Recommendation        Recommendation[]\n  Transaction           Transaction[]\n}\n\nmodel ClientAccount {\n  id             String           @id @default(uuid())\n  accountNumber  String           @unique\n  accountType    String\n  bankName       String\n  routingNumber  String?\n  isActive       Boolean          @default(true)\n  openDate       DateTime\n  balance        Float?\n  currency       String           @default(\"USD\")\n  clientId       String\n  client         Client           @relation(fields: [clientId], references: [id])\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n  Statement      Statement[]\n  Transaction    Transaction[]\n  BankConnection BankConnection[]\n}\n\nmodel Statement {\n  id             String           @id @default(uuid())\n  fileName       String\n  fileSize       Int\n  fileType       String\n  filePath       String?\n  uploadDate     DateTime         @default(now())\n  status         StatementStatus\n  clientId       String\n  client         Client           @relation(fields: [clientId], references: [id])\n  accountId      String?\n  account        ClientAccount?   @relation(fields: [accountId], references: [id])\n  period         Json?\n  errorMessage   String?\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n  Transaction    Transaction[]\n  ProcessingTask ProcessingTask[]\n}\n\nmodel BankConnection {\n  id             String           @id @default(uuid())\n  clientId       String\n  client         Client           @relation(fields: [clientId], references: [id])\n  accountId      String\n  account        ClientAccount    @relation(fields: [accountId], references: [id])\n  bankName       String\n  connectionType ConnectionType\n  lastSync       DateTime?\n  status         ConnectionStatus @default(CONNECTED)\n  credentials    Json?\n  settings       Json?\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n}\n\nmodel Transaction {\n  id           String          @id @default(uuid())\n  accountId    String\n  account      ClientAccount   @relation(fields: [accountId], references: [id])\n  clientId     String\n  client       Client          @relation(fields: [clientId], references: [id])\n  statementId  String?\n  statement    Statement?      @relation(fields: [statementId], references: [id])\n  date         DateTime\n  description  String\n  amount       Float\n  type         TransactionType\n  category     String?\n  counterparty String?\n  balanceAfter Float?\n  metadata     Json?\n  createdAt    DateTime        @default(now())\n  updatedAt    DateTime        @updatedAt\n}\n\nmodel ProcessingTask {\n  id                Int        @id @default(autoincrement())\n  taskId            String     @unique @default(uuid())\n  clientId          String\n  client            Client     @relation(fields: [clientId], references: [id])\n  statementId       String?\n  statement         Statement? @relation(fields: [statementId], references: [id])\n  type              TaskType\n  status            TaskStatus\n  progress          Int        @default(0)\n  startTime         DateTime   @default(now())\n  endTime           DateTime?\n  estimatedDuration Int?\n  currentStep       Json?\n  steps             Json\n  error             Json?\n  results           Json?\n  createdAt         DateTime   @default(now())\n  updatedAt         DateTime   @updatedAt\n}\n\nmodel TreasuryProduct {\n  id                  String           @id @default(uuid())\n  name                String\n  category            String\n  description         String\n  features            String[]\n  eligibilityCriteria Json\n  pricing             Json\n  benefits            Json[]\n  riskLevel           String\n  liquidityFeatures   String[]\n  createdAt           DateTime         @default(now())\n  updatedAt           DateTime         @updatedAt\n  Recommendation      Recommendation[]\n}\n\nmodel Recommendation {\n  id               String                 @id @default(uuid())\n  clientId         String\n  client           Client                 @relation(fields: [clientId], references: [id])\n  productId        String\n  product          TreasuryProduct        @relation(fields: [productId], references: [id])\n  priority         RecommendationPriority @default(MEDIUM)\n  rationale        Json\n  estimatedBenefit Json\n  implementation   Json\n  supportingData   Json[]\n  confidence       Float\n  status           RecommendationStatus   @default(PENDING)\n  reviewedBy       String?\n  reviewedAt       DateTime?\n  implementedAt    DateTime?\n  notes            String?\n  feedback         Json?\n  createdAt        DateTime               @default(now())\n  updatedAt        DateTime               @updatedAt\n}\n\nenum StatementStatus {\n  UPLOADED\n  PROCESSING\n  COMPLETED\n  FAILED\n  VALIDATED\n}\n\nenum ConnectionStatus {\n  CONNECTED\n  DISCONNECTED\n  ERROR\n  SYNCING\n}\n\nenum ConnectionType {\n  API\n  PLAID\n  YODLEE\n  MANUAL\n}\n\nenum TransactionType {\n  DEBIT\n  CREDIT\n  ACH\n  WIRE\n  CHECK\n  TRANSFER\n  FEE\n  INTEREST\n  OTHER\n}\n\nenum TaskType {\n  STATEMENT_PARSE\n  DATA_SYNC\n  ANALYSIS\n  RECOMMENDATION_GENERATION\n}\n\nenum TaskStatus {\n  PENDING\n  RUNNING\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nenum RecommendationPriority {\n  HIGH\n  MEDIUM\n  LOW\n}\n\nenum RecommendationStatus {\n  PENDING\n  APPROVED\n  REJECTED\n  IMPLEMENTED\n}\n",
  "inlineSchemaHash": "c5e196b7d29538ae7f9813f84b740e743ea541b229bbbae007646c30cf8bd0a3",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"isEmailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Token\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenToUser\"},{\"name\":\"Client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToUser\"}],\"dbName\":null},\"Token\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TokenType\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"blacklisted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TokenToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Client\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"businessType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"businessSegment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"riskProfile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relationshipManagerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"relationshipManager\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClientToUser\"},{\"name\":\"contact\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"preferences\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ClientAccount\",\"kind\":\"object\",\"type\":\"ClientAccount\",\"relationName\":\"ClientToClientAccount\"},{\"name\":\"Statement\",\"kind\":\"object\",\"type\":\"Statement\",\"relationName\":\"ClientToStatement\"},{\"name\":\"BankConnection\",\"kind\":\"object\",\"type\":\"BankConnection\",\"relationName\":\"BankConnectionToClient\"},{\"name\":\"ProcessingTask\",\"kind\":\"object\",\"type\":\"ProcessingTask\",\"relationName\":\"ClientToProcessingTask\"},{\"name\":\"Recommendation\",\"kind\":\"object\",\"type\":\"Recommendation\",\"relationName\":\"ClientToRecommendation\"},{\"name\":\"Transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ClientToTransaction\"}],\"dbName\":null},\"ClientAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"routingNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"openDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"balance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToClientAccount\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Statement\",\"kind\":\"object\",\"type\":\"Statement\",\"relationName\":\"ClientAccountToStatement\"},{\"name\":\"Transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ClientAccountToTransaction\"},{\"name\":\"BankConnection\",\"kind\":\"object\",\"type\":\"BankConnection\",\"relationName\":\"BankConnectionToClientAccount\"}],\"dbName\":null},\"Statement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"filePath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"StatementStatus\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToStatement\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"ClientAccount\",\"relationName\":\"ClientAccountToStatement\"},{\"name\":\"period\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"StatementToTransaction\"},{\"name\":\"ProcessingTask\",\"kind\":\"object\",\"type\":\"ProcessingTask\",\"relationName\":\"ProcessingTaskToStatement\"}],\"dbName\":null},\"BankConnection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"BankConnectionToClient\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"ClientAccount\",\"relationName\":\"BankConnectionToClientAccount\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connectionType\",\"kind\":\"enum\",\"type\":\"ConnectionType\"},{\"name\":\"lastSync\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ConnectionStatus\"},{\"name\":\"credentials\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"settings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"ClientAccount\",\"relationName\":\"ClientAccountToTransaction\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToTransaction\"},{\"name\":\"statementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statement\",\"kind\":\"object\",\"type\":\"Statement\",\"relationName\":\"StatementToTransaction\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"counterparty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"balanceAfter\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ProcessingTask\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToProcessingTask\"},{\"name\":\"statementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statement\",\"kind\":\"object\",\"type\":\"Statement\",\"relationName\":\"ProcessingTaskToStatement\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TaskType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TaskStatus\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"estimatedDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentStep\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"steps\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"results\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TreasuryProduct\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"features\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eligibilityCriteria\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"pricing\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"benefits\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"riskLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"liquidityFeatures\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Recommendation\",\"kind\":\"object\",\"type\":\"Recommendation\",\"relationName\":\"RecommendationToTreasuryProduct\"}],\"dbName\":null},\"Recommendation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToRecommendation\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"TreasuryProduct\",\"relationName\":\"RecommendationToTreasuryProduct\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"RecommendationPriority\"},{\"name\":\"rationale\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"estimatedBenefit\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"implementation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"supportingData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RecommendationStatus\"},{\"name\":\"reviewedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"implementedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"feedback\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

