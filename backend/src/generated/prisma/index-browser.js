
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  businessType: 'businessType',
  industry: 'industry',
  businessSegment: 'businessSegment',
  riskProfile: 'riskProfile',
  relationshipManagerId: 'relationshipManagerId',
  contact: 'contact',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientAccountScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  accountType: 'accountType',
  bankName: 'bankName',
  routingNumber: 'routingNumber',
  isActive: 'isActive',
  openDate: 'openDate',
  balance: 'balance',
  currency: 'currency',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatementScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  filePath: 'filePath',
  uploadDate: 'uploadDate',
  status: 'status',
  clientId: 'clientId',
  accountId: 'accountId',
  period: 'period',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  clientId: 'clientId',
  statementId: 'statementId',
  date: 'date',
  description: 'description',
  amount: 'amount',
  type: 'type',
  category: 'category',
  counterparty: 'counterparty',
  balanceAfter: 'balanceAfter',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessingTaskScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  clientId: 'clientId',
  statementId: 'statementId',
  type: 'type',
  status: 'status',
  progress: 'progress',
  startTime: 'startTime',
  endTime: 'endTime',
  estimatedDuration: 'estimatedDuration',
  currentStep: 'currentStep',
  steps: 'steps',
  error: 'error',
  results: 'results',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TreasuryProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  features: 'features',
  eligibilityCriteria: 'eligibilityCriteria',
  pricing: 'pricing',
  benefits: 'benefits',
  riskLevel: 'riskLevel',
  liquidityFeatures: 'liquidityFeatures',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  productId: 'productId',
  priority: 'priority',
  rationale: 'rationale',
  estimatedBenefit: 'estimatedBenefit',
  implementation: 'implementation',
  supportingData: 'supportingData',
  confidence: 'confidence',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  implementedAt: 'implementedAt',
  notes: 'notes',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankConnectionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  accountId: 'accountId',
  bankName: 'bankName',
  connectionType: 'connectionType',
  lastSync: 'lastSync',
  status: 'status',
  credentials: 'credentials',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowTaskScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  priority: 'priority',
  clientId: 'clientId',
  clientName: 'clientName',
  assignedTo: 'assignedTo',
  createdAt: 'createdAt',
  dueDate: 'dueDate',
  metadata: 'metadata',
  resolution: 'resolution',
  comments: 'comments',
  completedAt: 'completedAt',
  completedBy: 'completedBy',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowAuditScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  activityType: 'activityType',
  userId: 'userId',
  userName: 'userName',
  description: 'description',
  changes: 'changes',
  metadata: 'metadata',
  clientId: 'clientId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read: 'read',
  createdAt: 'createdAt',
  userId: 'userId',
  expiresAt: 'expiresAt'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  level: 'level',
  service: 'service',
  message: 'message',
  metadata: 'metadata',
  traceId: 'traceId'
};

exports.Prisma.MaintenanceTaskScalarFieldEnum = {
  id: 'id',
  operation: 'operation',
  status: 'status',
  parameters: 'parameters',
  startTime: 'startTime',
  endTime: 'endTime',
  estimatedDuration: 'estimatedDuration',
  results: 'results',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentTaskScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  agentType: 'agentType',
  status: 'status',
  progress: 'progress',
  results: 'results',
  startTime: 'startTime',
  endTime: 'endTime',
  logs: 'logs',
  context: 'context',
  options: 'options',
  estimatedDuration: 'estimatedDuration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentAnalysisScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  fileIds: 'fileIds',
  analysisType: 'analysisType',
  status: 'status',
  results: 'results',
  confidence: 'confidence',
  processingTime: 'processingTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.TokenType = exports.$Enums.TokenType = {
  ACCESS: 'ACCESS',
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

exports.StatementStatus = exports.$Enums.StatementStatus = {
  UPLOADED: 'UPLOADED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  VALIDATED: 'VALIDATED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT',
  ACH: 'ACH',
  WIRE: 'WIRE',
  CHECK: 'CHECK',
  TRANSFER: 'TRANSFER',
  FEE: 'FEE',
  INTEREST: 'INTEREST',
  OTHER: 'OTHER'
};

exports.TaskType = exports.$Enums.TaskType = {
  STATEMENT_PARSE: 'STATEMENT_PARSE',
  DATA_SYNC: 'DATA_SYNC',
  ANALYSIS: 'ANALYSIS',
  RECOMMENDATION_GENERATION: 'RECOMMENDATION_GENERATION'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.RecommendationPriority = exports.$Enums.RecommendationPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.RecommendationStatus = exports.$Enums.RecommendationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IMPLEMENTED: 'IMPLEMENTED'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  API: 'API',
  PLAID: 'PLAID',
  YODLEE: 'YODLEE',
  MANUAL: 'MANUAL'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  ERROR: 'ERROR',
  SYNCING: 'SYNCING'
};

exports.WorkflowTaskType = exports.$Enums.WorkflowTaskType = {
  RECOMMENDATION_APPROVAL: 'RECOMMENDATION_APPROVAL',
  CLIENT_REVIEW: 'CLIENT_REVIEW',
  STATEMENT_REVIEW: 'STATEMENT_REVIEW',
  RISK_ASSESSMENT: 'RISK_ASSESSMENT',
  GENERAL_TASK: 'GENERAL_TASK'
};

exports.WorkflowTaskStatus = exports.$Enums.WorkflowTaskStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.WorkflowTaskPriority = exports.$Enums.WorkflowTaskPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.WorkflowActivityType = exports.$Enums.WorkflowActivityType = {
  TASK_CREATED: 'TASK_CREATED',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  RECOMMENDATION_APPROVED: 'RECOMMENDATION_APPROVED',
  RECOMMENDATION_REJECTED: 'RECOMMENDATION_REJECTED',
  CLIENT_UPDATED: 'CLIENT_UPDATED',
  STATEMENT_PROCESSED: 'STATEMENT_PROCESSED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  PROCESSING_COMPLETE: 'PROCESSING_COMPLETE',
  PROCESSING_FAILED: 'PROCESSING_FAILED',
  RECOMMENDATION_READY: 'RECOMMENDATION_READY',
  STATEMENT_UPLOADED: 'STATEMENT_UPLOADED',
  CLIENT_UPDATED: 'CLIENT_UPDATED',
  WORKFLOW_TASK_ASSIGNED: 'WORKFLOW_TASK_ASSIGNED',
  WORKFLOW_TASK_COMPLETED: 'WORKFLOW_TASK_COMPLETED',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  GENERAL: 'GENERAL'
};

exports.AgentTaskStatus = exports.$Enums.AgentTaskStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  Client: 'Client',
  ClientAccount: 'ClientAccount',
  Statement: 'Statement',
  Transaction: 'Transaction',
  ProcessingTask: 'ProcessingTask',
  TreasuryProduct: 'TreasuryProduct',
  Recommendation: 'Recommendation',
  BankConnection: 'BankConnection',
  WorkflowTask: 'WorkflowTask',
  WorkflowAudit: 'WorkflowAudit',
  Notification: 'Notification',
  SystemLog: 'SystemLog',
  MaintenanceTask: 'MaintenanceTask',
  AgentTask: 'AgentTask',
  AgentAnalysis: 'AgentAnalysis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
